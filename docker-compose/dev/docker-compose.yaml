services:
  postgresql:
    image: postgres
    container_name: postgresql
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=dev@sql101@postgresql
      - POSTGRES_DB=eazybank_db
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    networks:
      - eazybank
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 5s
      timeout: 5s
      retries: 4
      start_period: 5s
    deploy:
      resources:
        limits:
          memory: 100m
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
    extends:
      file: common-config.yaml
      service: network-deploy-service
    deploy:
      resources:
        limits:
          memory: 200m

  redis:
    image: redis:latest
    container_name: redis
    hostname: redis
    ports:
      - 6379:6379
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
    extends:
      file: common-config.yaml
      service: network-deploy-service
    deploy:
      resources:
        limits:
          memory: 80m

  read:
    image: grafana/loki:2.9.2
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      eazybank:
        aliases:
          - loki

  write:
    image: grafana/loki:2.9.2
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  promtail:
    image: grafana/promtail:2.9.2
    volumes:
      - ../observability/promtail/promtail-local-config.yaml:/etc/promtail/config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - gateway
    networks:
      - eazybank

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - eazybank

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    volumes:
      - ../observability/grafana/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
    ports:
      - "3000:3000"
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - eazybank

  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - eazybank

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - eazybank

  tempo:
    image: grafana/tempo
    container_name: tempo
    command: -config.file /etc/tempo-config.yaml
    ports:
      - "3110:3100"
      - "4317:4317"
    volumes:
      - ../observability/tempo/tempo.yaml:/etc/tempo-config.yaml
    extends:
      file: common-config.yaml
      service: network-deploy-service
  config-server:
    image: davidnkamura/configserver:2.0
    container_name: config-server
    ports:
      - 8071:8071
    healthcheck:
      test: "curl --fail --silent http://localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 50
      start_period: 10s
    depends_on:
      rabbitmq:
        condition: service_healthy
    extends:
      file: common-config.yaml
      service: microservice-base-config
    environment:
      OTEL_SERVICE_NAME: "configserver"
  eureka-server:
      image: davidnkamura/eurekaserver:1.0
      container_name: eureka-server
      ports:
        - 8070:8070
      healthcheck:
        test: "curl --fail --silent http://localhost:8070/actuator/health/readiness | grep UP || exit 1"
        interval: 5s
        timeout: 5s
        retries: 10
        start_period: 5s
      depends_on:
        config-server:
          condition: service_healthy
      networks:
        - eazybank
      environment:
        SPRING_APPLICATION_NAME: eurekaserver
        SPRING_CONFIG_IMPORT: configserver:http://config-server:8071/
        OTEL_SERVICE_NAME: "eurekaserver"
      deploy:
        resources:
          limits:
            memory: 400m
  accounts-service:
    image: davidnkamura/accounts-service:5.0
    container_name: accounts-service
    ports:
      - 8080:8080
    healthcheck:
      test: "curl --fail --silent http://localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 5s
    environment:
      SPRING_APPLICATION_NAME: accounts
      OTEL_SERVICE_NAME: "accounts-service"
    links:
        - postgresql
    extends:
      file: common-config.yaml
      service: microservice-configserver-config
  loans-service:
    image: davidnkamura/loans-service:4.0
    container_name: loans-service
    ports:
      - 8090:8090
    healthcheck:
      test: "curl --fail --silent http://localhost:8090/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 5s
    environment:
      SPRING_APPLICATION_NAME: loans
      OTEL_SERVICE_NAME: "loans-service"
    links:
      - postgresql
    extends:
      file: common-config.yaml
      service: microservice-configserver-config
  cards-service:
    image: davidnkamura/cards-service:4.0
    container_name: cards-service
    ports:
      - 9000:9000
    healthcheck:
      test: "curl --fail --silent http://localhost:9000/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 5s
    environment:
      SPRING_APPLICATION_NAME: cards
      OTEL_SERVICE_NAME: "cards-service"
    links:
      - postgresql
    extends:
      file: common-config.yaml
      service: microservice-configserver-config
  gateway-server:
    image: davidnkamura/gatewayserver:2.0
    container_name: gateway-server
    ports:
      - 9100:9100
    depends_on:
      accounts-service:
        condition: service_healthy
      cards-service:
        condition: service_healthy
      loans-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: gatewayserver
      SPRING_CONFIG_IMPORT: configserver:http://config-server:8071/
      SPRING_DATA_REDIS_CONNECT-TIMEOUT: 2s
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_TIMEOUT: 1s
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8070/eureka/
      OTEL_SERVICE_NAME: "gatewayserver"
      LOGGING_PATTERN_LEVEL: "%5p [$${spring.application.name},%X{trace_id},%X{span_id}]"
    networks:
      - eazybank
    deploy:
      resources:
        limits:
          memory: 400m
volumes:
  postgresql-data:
    driver: local
networks:
  eazybank:
    driver: "bridge"
